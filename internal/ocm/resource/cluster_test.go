package resource

import (
	"context"

	. "github.com/onsi/ginkgo/v2"
	. "github.com/onsi/gomega"
)

var _ = Describe("Cluster - create nodes validation", func() {
	var cluster *Cluster
	ctx := context.TODO()
	BeforeEach(func() {
		cluster = NewCluster()
	})
	It("Autoscaling disabled minReplicas set - failure", func() {
		err := cluster.CreateNodes(ctx, false, nil, pointer(int64(2)), nil, nil, nil, nil, false)
		Expect(err).To(HaveOccurred())
		Expect(err.Error()).To(Equal("Autoscaling must be enabled in order to set min and max replicas"))
	})
	It("Autoscaling disabled maxReplicas set - failure", func() {
		err := cluster.CreateNodes(ctx, false, nil, nil, pointer(int64(2)), nil, nil, nil, false)
		Expect(err).To(HaveOccurred())
		Expect(err.Error()).To(Equal("Autoscaling must be enabled in order to set min and max replicas"))
	})
	It("Autoscaling disabled replicas smaller than 2 - failure", func() {
		err := cluster.CreateNodes(ctx, false, pointer(int64(1)), nil, nil, nil, nil, nil, false)
		Expect(err).To(HaveOccurred())
		Expect(err.Error()).To(Equal("Cluster requires at least 2 compute nodes"))
	})
	It("Autoscaling disabled default replicas - success", func() {
		err := cluster.CreateNodes(ctx, false, nil, nil, nil, nil, nil, nil, false)
		Expect(err).NotTo(HaveOccurred())
		ocmCluster, err := cluster.Build()
		Expect(err).NotTo(HaveOccurred())
		ocmClusterNode := ocmCluster.Nodes()
		Expect(ocmClusterNode).NotTo(BeNil())
		Expect(ocmClusterNode.ComputeMachineType()).To(BeNil())
		Expect(ocmClusterNode.ComputeLabels()).To(BeEmpty())
		Expect(ocmClusterNode.AvailabilityZones()).To(BeEmpty())
		Expect(ocmClusterNode.Compute()).To(Equal(2))
		autoscaleCompute := ocmClusterNode.AutoscaleCompute()
		Expect(autoscaleCompute).To(BeNil())
	})
	It("Autoscaling disabled 3 replicas - success", func() {
		err := cluster.CreateNodes(ctx, false, pointer(int64(3)), nil, nil, nil, nil, nil, false)
		Expect(err).NotTo(HaveOccurred())
		ocmCluster, err := cluster.Build()
		Expect(err).NotTo(HaveOccurred())
		ocmClusterNode := ocmCluster.Nodes()
		Expect(ocmClusterNode).NotTo(BeNil())
		Expect(ocmClusterNode.ComputeMachineType()).To(BeNil())
		Expect(ocmClusterNode.ComputeLabels()).To(BeEmpty())
		Expect(ocmClusterNode.AvailabilityZones()).To(BeEmpty())
		Expect(ocmClusterNode.Compute()).To(Equal(3))
		autoscaleCompute := ocmClusterNode.AutoscaleCompute()
		Expect(autoscaleCompute).To(BeNil())
	})
	It("Autoscaling enabled replicas set - failure", func() {
		err := cluster.CreateNodes(ctx, true, pointer(int64(2)), nil, nil, nil, nil, nil, false)
		Expect(err).To(HaveOccurred())
		Expect(err.Error()).To(Equal("When autoscaling is enabled, replicas should not be configured"))
	})
	It("Autoscaling enabled default minReplicas & maxReplicas - success", func() {
		err := cluster.CreateNodes(ctx, true, nil, nil, nil, nil, nil, nil, false)
		Expect(err).NotTo(HaveOccurred())
		ocmCluster, err := cluster.Build()
		Expect(err).NotTo(HaveOccurred())
		ocmClusterNode := ocmCluster.Nodes()
		Expect(ocmClusterNode).NotTo(BeNil())
		Expect(ocmClusterNode.ComputeMachineType()).To(BeNil())
		Expect(ocmClusterNode.ComputeLabels()).To(BeEmpty())
		Expect(ocmClusterNode.AvailabilityZones()).To(BeEmpty())
		Expect(ocmClusterNode.Compute()).To(Equal(0))
		autoscaleCompute := ocmClusterNode.AutoscaleCompute()
		Expect(autoscaleCompute).NotTo(BeNil())
		Expect(autoscaleCompute.MinReplicas()).To(Equal(2))
		Expect(autoscaleCompute.MaxReplicas()).To(Equal(2))
	})
	It("Autoscaling enabled default maxReplicas smaller than minReplicas - failure", func() {
		err := cluster.CreateNodes(ctx, true, nil, pointer(int64(4)), pointer(int64(3)), nil, nil, nil, false)
		Expect(err).To(HaveOccurred())
		Expect(err.Error()).To(Equal("max-replicas must be greater or equal to min-replicas"))
	})
	It("Autoscaling enabled set minReplicas & maxReplicas - success", func() {
		err := cluster.CreateNodes(ctx, true, nil, pointer(int64(2)), pointer(int64(4)), nil, nil, nil, false)
		Expect(err).NotTo(HaveOccurred())
		ocmCluster, err := cluster.Build()
		Expect(err).NotTo(HaveOccurred())
		ocmClusterNode := ocmCluster.Nodes()
		Expect(ocmClusterNode).NotTo(BeNil())
		Expect(ocmClusterNode.ComputeMachineType()).To(BeNil())
		Expect(ocmClusterNode.ComputeLabels()).To(BeEmpty())
		Expect(ocmClusterNode.AvailabilityZones()).To(BeEmpty())
		Expect(ocmClusterNode.Compute()).To(Equal(0))
		autoscaleCompute := ocmClusterNode.AutoscaleCompute()
		Expect(autoscaleCompute).NotTo(BeNil())
		Expect(autoscaleCompute.MinReplicas()).To(Equal(2))
		Expect(autoscaleCompute.MaxReplicas()).To(Equal(4))
	})
	It("Autoscaling disabled set ComputeMachineType - success", func() {
		err := cluster.CreateNodes(ctx, false, nil, nil, nil, pointer("asdf"), nil, nil, false)
		Expect(err).NotTo(HaveOccurred())
		ocmCluster, err := cluster.Build()
		Expect(err).NotTo(HaveOccurred())
		ocmClusterNode := ocmCluster.Nodes()
		Expect(ocmClusterNode).NotTo(BeNil())
		machineType := ocmClusterNode.ComputeMachineType()
		Expect(machineType).NotTo(BeNil())
		Expect(machineType.ID()).To(Equal("asdf"))
		Expect(ocmClusterNode.ComputeLabels()).To(BeEmpty())
		Expect(ocmClusterNode.AvailabilityZones()).To(BeEmpty())
		Expect(ocmClusterNode.Compute()).To(Equal(2))
		autoscaleCompute := ocmClusterNode.AutoscaleCompute()
		Expect(autoscaleCompute).To(BeNil())
	})
	It("Autoscaling disabled set compute labels - success", func() {
		err := cluster.CreateNodes(ctx, false, nil, nil, nil, nil, map[string]string{"key1": "val1"}, nil, false)
		Expect(err).NotTo(HaveOccurred())
		ocmCluster, err := cluster.Build()
		Expect(err).NotTo(HaveOccurred())
		ocmClusterNode := ocmCluster.Nodes()
		Expect(ocmClusterNode).NotTo(BeNil())
		Expect(ocmClusterNode.ComputeMachineType()).To(BeNil())
		computeLabels := ocmClusterNode.ComputeLabels()
		Expect(computeLabels).To(HaveLen(1))
		Expect(computeLabels["key1"]).To(Equal("val1"))
		Expect(ocmClusterNode.AvailabilityZones()).To(BeEmpty())
		Expect(ocmClusterNode.Compute()).To(Equal(2))
		autoscaleCompute := ocmClusterNode.AutoscaleCompute()
		Expect(autoscaleCompute).To(BeNil())
	})
	It("Autoscaling disabled multiAZ false set one availability zone - success", func() {
		err := cluster.CreateNodes(ctx, false, nil, nil, nil, nil, nil, []string{"us-east-1a"}, false)
		Expect(err).NotTo(HaveOccurred())
		ocmCluster, err := cluster.Build()
		Expect(err).NotTo(HaveOccurred())
		ocmClusterNode := ocmCluster.Nodes()
		Expect(ocmClusterNode).NotTo(BeNil())
		Expect(ocmClusterNode.ComputeMachineType()).To(BeNil())
		Expect(ocmClusterNode.ComputeLabels()).To(BeEmpty())
		azs := ocmClusterNode.AvailabilityZones()
		Expect(azs).To(HaveLen(1))
		Expect(ocmClusterNode.Compute()).To(Equal(2))
		autoscaleCompute := ocmClusterNode.AutoscaleCompute()
		Expect(autoscaleCompute).To(BeNil())
	})
	It("Autoscaling disabled multiAZ false set three availability zones - failure", func() {
		err := cluster.CreateNodes(ctx, false, nil, nil, nil, nil, nil, []string{"us-east-1a", "us-east-1b", "us-east-1c"}, false)
		Expect(err).To(HaveOccurred())
		Expect(err.Error()).To(Equal("The number of availability zones for a single AZ cluster should be 1, instead received: 3"))
	})
	It("Autoscaling disabled multiAZ true set three availability zones and two replicas - failure", func() {
		err := cluster.CreateNodes(ctx, false, pointer(int64(2)), nil, nil, nil, nil, []string{"us-east-1a", "us-east-1b", "us-east-1c"}, true)
		Expect(err).To(HaveOccurred())
		Expect(err.Error()).To(Equal("Multi AZ cluster requires at least 3 compute nodes"))
	})
	It("Autoscaling disabled multiAZ true set three availability zones and three replicas - success", func() {
		err := cluster.CreateNodes(ctx, false, pointer(int64(3)), nil, nil, nil, nil, []string{"us-east-1a", "us-east-1b", "us-east-1c"}, true)
		Expect(err).NotTo(HaveOccurred())
		ocmCluster, err := cluster.Build()
		Expect(err).NotTo(HaveOccurred())
		ocmClusterNode := ocmCluster.Nodes()
		Expect(ocmClusterNode).NotTo(BeNil())
		Expect(ocmClusterNode.ComputeMachineType()).To(BeNil())
		Expect(ocmClusterNode.ComputeLabels()).To(BeEmpty())
		azs := ocmClusterNode.AvailabilityZones()
		Expect(azs).To(HaveLen(3))
		Expect(ocmClusterNode.Compute()).To(Equal(3))
		autoscaleCompute := ocmClusterNode.AutoscaleCompute()
		Expect(autoscaleCompute).To(BeNil())
	})
	It("Autoscaling disabled multiAZ true set one zone - failure", func() {
		err := cluster.CreateNodes(ctx, false, nil, nil, nil, nil, nil, []string{"us-east-1a", "us-east-1b", "us-east-1c"}, true)
		Expect(err).To(HaveOccurred())
		Expect(err.Error()).To(Equal("Multi AZ cluster requires at least 3 compute nodes"))
	})
})

func pointer[T any](src T) *T {
	return &src
}
